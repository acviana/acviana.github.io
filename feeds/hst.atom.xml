<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>The Other Side of the Screen</title><link href="http://acviana.github.io/" rel="alternate"></link><link href="http://acviana.github.io/feeds/hst.atom.xml" rel="self"></link><id>http://acviana.github.io/</id><updated>2014-01-30T00:00:00-05:00</updated><entry><title>Fitting 2D Gaussians with agpy</title><link href="http://acviana.github.io/posts/2014/fitting-2d-gaussians-with-agpy/" rel="alternate"></link><updated>2014-01-30T00:00:00-05:00</updated><author><name>Alex C. Viana</name></author><id>tag:acviana.github.io,2014-01-30:posts/2014/fitting-2d-gaussians-with-agpy/</id><summary type="html">&lt;p&gt;&lt;strong&gt;Update 01/30/2014:&lt;/strong&gt; Adam has split his &lt;code&gt;gaussfitter&lt;/code&gt; code off into it's own GitHub repository &lt;a href="https://github.com/keflavich/gaussfitter/blob/master/gaussfitter/gaussfitter.py"&gt;here&lt;/a&gt; (&lt;em&gt;"PR's Welcome!"&lt;/em&gt;). This removes some dependencies and changes the import statement but as of right now everything else is the same. I've maintained the old links to the original agpy repo in the post below but please use the above repo for the latest version.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;After some &lt;a href="http://acviana.github.io/posts/2013/counting-to-10-million-stars/"&gt;initial work&lt;/a&gt; with fitting WFC3 UVIS PSFs with 1D Gaussians through the x and y axis I decided to look at 2d Guassian fitting as well. I was disappointed to find there wasn't already a canned procedure to do this in something like SciPy. But after some digging I decided to use &lt;a href="http://casa.colorado.edu/~ginsbura/"&gt;Adam Ginsburg's&lt;/a&gt; personal agpy library. I briefly met Adam at the &lt;a href="http://dotastronomy.com/"&gt;dotAstronomy&lt;/a&gt; conference last year in Boston. He's a contributor to &lt;a href="http://www.astropy.org/"&gt;AstroPY&lt;/a&gt;, &lt;a href="http://astroquery.readthedocs.org/en/latest/"&gt;AstroQuery&lt;/a&gt;, and &lt;a href="http://aplpy.github.io/"&gt;AplPy&lt;/a&gt; so I had a hunch I could trust his code and it's worked out great. &lt;/p&gt;
&lt;p&gt;You can clone the repo &lt;a href="https://github.com/keflavich/agpy"&gt;here&lt;/a&gt;. There are a couple of dependencies but I only satisfied the AstroPy and Numpy requirements and that was enough to run the &lt;code&gt;gaussfit&lt;/code&gt; function. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;agpy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;gaussfitter&lt;/span&gt;

&lt;span class="n"&gt;mpfit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;psf_fit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gaussfitter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gaussfit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;psf_array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;returnmp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                                      &lt;span class="n"&gt;returnfitimage&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using &lt;code&gt;gaussfit&lt;/code&gt; without the &lt;code&gt;returnmp&lt;/code&gt; or &lt;code&gt;returnfitimage&lt;/code&gt; parameters just returns a list with the following model parameters (in order): &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;height&lt;/li&gt;
&lt;li&gt;amplitude&lt;/li&gt;
&lt;li&gt;x&lt;/li&gt;
&lt;li&gt;y&lt;/li&gt;
&lt;li&gt;width_x&lt;/li&gt;
&lt;li&gt;width_y&lt;/li&gt;
&lt;li&gt;rotation angle. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Adding &lt;code&gt;returnfitimage=True&lt;/code&gt; will also return a NumPy array of the model with the same dimensions as the input data. Lastly, setting &lt;code&gt;returnmp=True&lt;/code&gt; will return a &lt;code&gt;mpfit&lt;/code&gt; instance, which is the class used to generate the fit. The class is defined in the &lt;code&gt;agpy.mpfit_custom&lt;/code&gt; module. The &lt;code&gt;mpfit&lt;/code&gt; instance contains two useful attributes, &lt;code&gt;mpfit.params&lt;/code&gt; which is the same list of parameters that &lt;code&gt;guassfit&lt;/code&gt; returns by default, and &lt;code&gt;mpfits.covar&lt;/code&gt; which is a 7x7 &lt;a href="http://en.wikipedia.org/wiki/Covariance_matrix"&gt;covariance matrix&lt;/a&gt; for the 7 model parameters. &lt;/p&gt;
&lt;p&gt;It took me a little bit of work to figure out all these outputs but they were exactly what I needed so I followed up with Adam and submitted my &lt;em&gt;first&lt;/em&gt; FOSS PR on GitHub with some documentation &lt;a href="https://github.com/keflavich/agpy/pull/2"&gt;improvements&lt;/a&gt;. It's a small contribution but still a personal milestone.&lt;/p&gt;
&lt;p&gt;Finally, I made a plot of the input data, the model, and the residual (difference) at two different scales. I'm definitely happy with this and am looking forward to digging into the covariance matrix a little more to really understand how well I'm fitting these PSFs.&lt;/p&gt;
&lt;p&gt;&lt;img style="width: 800px; max-width: 100%; height: auto;" alt="Oops, something broke." src="/images/2d-gaussians.png" /&gt;&lt;/p&gt;</summary><category term="python"></category><category term="code"></category><category term="psf"></category><category term="uvis"></category><category term="wfc3"></category><category term="milestones"></category><category term="plots"></category><category term="hst"></category></entry><entry><title>The Moving Target Pipeline</title><link href="http://acviana.github.io/posts/2013/mtpipeline-ddrf/" rel="alternate"></link><updated>2013-11-18T00:00:00-05:00</updated><author><name>Alex C. Viana</name></author><id>tag:acviana.github.io,2013-11-18:posts/2013/mtpipeline-ddrf/</id><summary type="html">&lt;p&gt;A few weeks ago I was awarded an research grant to continue working on a prototype software pipeline for HST moving target (solar system) observations. The grant came from an internal source called the Director's Discretionary Research Fund (DDRF). My project, called the Moving Target Pipeline, was fully funded at $21,000 and allows me to buy back 25% of my time for one year to work on the project. Here is the proposal abstract:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"We propose a moving target pipeline for the WFC3 and ACS instruments based our existing WFPC2 software to produce properly drizzled FITS images, dynamically scaled preview images, and predicted ephemeris positions. Such a pipeline is relevant to ongoing HST scientific observations, the Hubble Legacy Archive (HLA), and serves to lay the design groundwork for JWSTâ€™s moving target processing. We request funds to support a senior RIA for our software development activities. &lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Continuing from the proposal:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Our WFPC2 pipeline addresses the 4 main issues that impede performing Solar System astronomy with HST archival data: (1) identifying cosmic rays, (2) drizzling, (3) scaled preview images, and (4) identifying incidental ephemeris observations."&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This image gives an attractive visual of what we can already accomplish for WFPC2 data and will expand to the WFC3 and ACS cameras:&lt;/p&gt;
&lt;p&gt;&lt;img style="width: 800px; max-width: 100%; height: auto;" alt="Oops, something broke." src="/images/mtpipeline-mars-before-after.png" /&gt;&lt;/p&gt;
&lt;p&gt;You can find the full proposal &lt;a href="https://www.dropbox.com/s/04m5rboqkkmzuvm/2013_Fall_DDRF_Proposal_No_Recs.pdf"&gt;here&lt;/a&gt;. Our project will be open source and available on GitHub. It will be an extension of our existing work on a citizen science project for WFPC2 which you can browse &lt;a href="" title="https://github.com/STScI-Citizen-Science/MTPipeline"&gt;here&lt;/a&gt;. This builds off a number of other grants and &lt;a href="http://archive.stsci.edu/prepds/planetpipeline/index.html"&gt;existing work&lt;/a&gt; in this area &lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;I hope that this phase of the project will be useful for planetary scientists using HST.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Full disclosure, I misspelled "activities" in the actual abstract. &lt;em&gt;facepalm&lt;/em&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Humblebrag / scavenger hunt, spot the astronaut co-investigator in the parent proposal :-)&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="mtpipeline"></category><category term="milestones"></category><category term="wfc3"></category><category term="acs"></category><category term="hst"></category><category term="jwst"></category><category term="wfpc2"></category></entry></feed>